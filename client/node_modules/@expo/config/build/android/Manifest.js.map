{"version":3,"file":"Manifest.js","sourceRoot":"","sources":["../../src/android/Manifest.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,wDAA0B;AAC1B,gDAAwB;AAExB,2CAA6B;AAoItB,KAAK,UAAU,yBAAyB,CAC7C,YAAoB,EACpB,QAAkB;IAElB,MAAM,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACzC,MAAM,kBAAE,CAAC,SAAS,CAAC,cAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;IAC/C,MAAM,kBAAE,CAAC,SAAS,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;AAChD,CAAC;AAPD,8DAOC;AAEM,KAAK,UAAU,wBAAwB,CAAC,YAAoB;IACjE,MAAM,GAAG,GAAG,MAAM,GAAG,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC;IAC3D,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;QACpB,MAAM,IAAI,KAAK,CAAC,6BAA6B,GAAG,YAAY,CAAC,CAAC;KAC/D;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAND,4DAMC;AAED,SAAS,UAAU,CAAC,GAAkB;IACpC,8BAA8B;IAC9B,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC;AACxB,CAAC;AAED,SAAgB,kBAAkB,CAAC,QAAkB;;IACnD,OAAO,mBACL,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,QAAQ,0CAAE,WAAW,0CAAE,MAAM,CACrC,CAAC,CAAC,EAAE,WAAC,OAAA,OAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAG,GAAG,2CAAI,cAAc,OAAM,kBAAkB,CAAA,EAAA,EACtD,CAAC,oCAAK,IAAI,CACb,CAAC;AACJ,CAAC;AAND,gDAMC;AAED,SAAgB,eAAe,CAAC,QAAkB;;IAChD,MAAM,YAAY,iCAAG,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,QAAQ,0CAAE,WAAW,0CAAG,CAAC,2CAAG,QAAQ,0CAAE,MAAM,mDACzE,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,KAAK,eAAe,CACvD,CAAC;IACF,aAAO,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAG,CAAC,oCAAK,IAAI,CAAC;AACnC,CAAC;AALD,0CAKC;AAED,SAAgB,gCAAgC,CAC9C,eAAoB,EACpB,QAAgB,EAChB,SAAiB;IAEjB,IAAI,oBAAoB,CAAC;IACzB,MAAM,OAAO,GAAG;QACd,CAAC,EAAE;YACD,cAAc,EAAE,QAAQ;YACxB,eAAe,EAAE,SAAS;SAC3B;KACF,CAAC;IACF,IAAI,eAAe,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;QAC/C,oBAAoB,GAAG,eAAe,CAAC,WAAW,CAAC,CAAC,MAAM,CACxD,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,KAAK,QAAQ,CAChD,CAAC;QACF,IAAI,oBAAoB,CAAC,MAAM,EAAE;YAC/B,oBAAoB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,eAAe,CAAC,GAAG,SAAS,CAAC;SAC3D;aAAM;YACL,eAAe,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC5C;KACF;SAAM;QACL,eAAe,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;KAC1C;IACD,OAAO,eAAe,CAAC;AACzB,CAAC;AAzBD,4EAyBC","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\n\nimport * as XML from './XML';\n\nexport type StringBoolean = 'true' | 'false';\n\ntype ManifestMetaDataAttributes = AndroidManifestAttributes & {\n  'android:value'?: string;\n  'android:resource'?: string;\n};\n\ntype AndroidManifestAttributes = {\n  'android:name': string | 'android.intent.action.VIEW';\n};\n\ntype ManifestAction = {\n  $: AndroidManifestAttributes;\n};\n\ntype ManifestCategory = {\n  $: AndroidManifestAttributes;\n};\n\ntype ManifestData = {\n  $: {\n    [key: string]: string | undefined;\n    'android:host'?: string;\n    'android:pathPrefix'?: string;\n    'android:scheme'?: string;\n  };\n};\n\ntype ManifestReciever = {\n  $: AndroidManifestAttributes & {\n    'android:exported'?: StringBoolean;\n    'android:enabled'?: StringBoolean;\n  };\n  'intent-filter'?: ManifestIntentFilter[];\n};\n\ntype ManifestIntentFilter = {\n  action?: ManifestAction[];\n  data?: ManifestData[];\n  category?: ManifestCategory[];\n};\n\nexport type ManifestMetaData = {\n  $: ManifestMetaDataAttributes;\n};\n\ntype ManifestServiceAttributes = AndroidManifestAttributes & {\n  'android:enabled'?: StringBoolean;\n  'android:exported'?: StringBoolean;\n  'android:permission'?: string;\n  // ...\n};\n\ntype ManifestService = {\n  $: ManifestServiceAttributes;\n  'intent-filter'?: ManifestIntentFilter[];\n};\n\ntype ManifestApplicationAttributes = {\n  'android:name': string | '.MainApplication';\n  'android:icon'?: string;\n  'android:label'?: string;\n  'android:allowBackup'?: StringBoolean;\n  'android:largeHeap'?: StringBoolean;\n  'android:requestLegacyExternalStorage'?: StringBoolean;\n  'android:usesCleartextTraffic'?: StringBoolean;\n  [key: string]: string | undefined;\n};\n\nexport type ManifestActivity = {\n  $: ManifestApplicationAttributes & {\n    'android:exported'?: StringBoolean;\n    'android:launchMode'?: string;\n    'android:theme'?: string;\n    [key: string]: string | undefined;\n  };\n  'intent-filter'?: ManifestIntentFilter[];\n  // ...\n};\n\nexport type ManifestUsesLibrary = {\n  $: AndroidManifestAttributes & {\n    'android:required'?: StringBoolean;\n  };\n};\n\ntype ManifestApplication = {\n  $: ManifestApplicationAttributes;\n  activity?: ManifestActivity[];\n  service?: ManifestService[];\n  receiver?: ManifestReciever[];\n  'meta-data'?: ManifestMetaData[];\n  'uses-library'?: ManifestUsesLibrary[];\n  // ...\n};\n\ntype ManifestPermission = {\n  $: AndroidManifestAttributes & {\n    'android:protectionLevel'?: string | 'signature';\n  };\n};\n\nexport type ManifestUsesPermission = {\n  $: AndroidManifestAttributes;\n};\n\ntype ManifestUsesFeature = {\n  $: AndroidManifestAttributes & {\n    'android:glEsVersion'?: string;\n    'android:required': StringBoolean;\n  };\n};\n\nexport type Document = {\n  manifest: {\n    // Probably more, but this is currently all we'd need for most cases in Expo.\n    $: { 'xmlns:android': string; package?: string; [key: string]: string | undefined };\n    permission?: ManifestPermission[];\n    'uses-permission'?: ManifestUsesPermission[];\n    'uses-feature'?: ManifestUsesFeature[];\n    application?: ManifestApplication[];\n  };\n};\n\nexport type InputOptions = {\n  manifestPath?: string | null;\n  projectRoot?: string | null;\n  manifest?: Document | null;\n};\n\nexport async function writeAndroidManifestAsync(\n  manifestPath: string,\n  manifest: Document\n): Promise<void> {\n  const manifestXml = XML.format(manifest);\n  await fs.ensureDir(path.dirname(manifestPath));\n  await fs.writeFile(manifestPath, manifestXml);\n}\n\nexport async function readAndroidManifestAsync(manifestPath: string): Promise<Document> {\n  const xml = await XML.readXMLAsync({ path: manifestPath });\n  if (!isManifest(xml)) {\n    throw new Error('Invalid manifest found at: ' + manifestPath);\n  }\n  return xml;\n}\n\nfunction isManifest(xml: XML.XMLObject): xml is Document {\n  // TODO: Maybe more validation\n  return !!xml.manifest;\n}\n\nexport function getMainApplication(manifest: Document): ManifestApplication | null {\n  return (\n    manifest?.manifest?.application?.filter(\n      e => e?.['$']?.['android:name'] === '.MainApplication'\n    )[0] ?? null\n  );\n}\n\nexport function getMainActivity(manifest: Document): ManifestActivity | null {\n  const mainActivity = manifest?.manifest?.application?.[0]?.activity?.filter?.(\n    (e: any) => e['$']['android:name'] === '.MainActivity'\n  );\n  return mainActivity?.[0] ?? null;\n}\n\nexport function addMetaDataItemToMainApplication(\n  mainApplication: any,\n  itemName: string,\n  itemValue: string\n): ManifestApplication {\n  let existingMetaDataItem;\n  const newItem = {\n    $: {\n      'android:name': itemName,\n      'android:value': itemValue,\n    },\n  };\n  if (mainApplication.hasOwnProperty('meta-data')) {\n    existingMetaDataItem = mainApplication['meta-data'].filter(\n      (e: any) => e['$']['android:name'] === itemName\n    );\n    if (existingMetaDataItem.length) {\n      existingMetaDataItem[0]['$']['android:value'] = itemValue;\n    } else {\n      mainApplication['meta-data'].push(newItem);\n    }\n  } else {\n    mainApplication['meta-data'] = [newItem];\n  }\n  return mainApplication;\n}\n"]}