{"version":3,"file":"StatusBar.js","sourceRoot":"","sources":["../../src/android/StatusBar.ts"],"names":[],"mappings":";;AACA,qCAAsE;AACtE,2CAAwF;AACxF,qCAAuE;AACvE,+BAAsC;AAEtC,MAAM,sBAAsB,GAAG,kBAAkB,CAAC;AAClD,MAAM,yBAAyB,GAAG,iCAAiC,CAAC;AACpE,MAAM,uBAAuB,GAAG,8BAA8B,CAAC;AAE/D,SAAgB,iBAAiB,CAAC,MAAkB;;IAClD,OAAO,OAAA,MAAM,CAAC,gBAAgB,0CAAE,eAAe,KAAI,aAAa,CAAC;AACnE,CAAC;AAFD,8CAEC;AAED,SAAgB,iBAAiB,CAAC,MAAkB;;IAClD,OAAO,OAAA,MAAM,CAAC,gBAAgB,0CAAE,QAAQ,KAAI,eAAe,CAAC;AAC9D,CAAC;AAFD,8CAEC;AAEM,KAAK,UAAU,kBAAkB,CAAC,MAAkB,EAAE,gBAAwB;IACnF,MAAM,SAAS,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;IAC5C,MAAM,cAAc,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;IAEjD,MAAM,UAAU,GAAG,MAAM,qCAA4B,CAAC,gBAAgB,CAAC,CAAC;IACxE,MAAM,UAAU,GAAG,MAAM,qCAA4B,CAAC,gBAAgB,CAAC,CAAC;IAExE,IAAI,UAAU,GAAG,MAAM,iCAAqB,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;IACnE,IAAI,UAAU,GAAG,MAAM,iCAAqB,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;IAEnE,IAAI,cAA+B,CAAC;IACpC,IAAI,SAAS,KAAK,aAAa,EAAE;QAC/B,sCAAsC;QACtC,cAAc,GAAG,6BAAiB,CAAC,EAAE,IAAI,EAAE,yBAAyB,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;KACxF;SAAM;QACL,6DAA6D;QAC7D,MAAM,cAAc,GAAG,6BAAiB,CAAC,EAAE,IAAI,EAAE,sBAAsB,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC;QAC7F,UAAU,GAAG,qBAAY,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;QAEtD,cAAc,GAAG,6BAAiB,CAAC;YACjC,IAAI,EAAE,sBAAsB;YAC5B,KAAK,EAAE,UAAU,sBAAsB,EAAE;SAC1C,CAAC,CAAC;KACJ;IAED,gEAAgE;IAChE,IAAI,cAAc,KAAK,cAAc,EAAE;QACrC,MAAM,kBAAkB,GAAoB,6BAAiB,CAAC;YAC5D,IAAI,EAAE,uBAAuB;YAC7B,KAAK,EAAE,MAAM;SACd,CAAC,CAAC;QACH,UAAU,GAAG,sBAAa,CAAC;YACzB,IAAI,EAAE,kBAAkB;YACxB,GAAG,EAAE,UAAU;YACf,MAAM,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,mCAAmC,EAAE;SAC1E,CAAC,CAAC;KACJ;IAED,UAAU,GAAG,sBAAa,CAAC;QACzB,IAAI,EAAE,cAAc;QACpB,GAAG,EAAE,UAAU;QACf,MAAM,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,mCAAmC,EAAE;KAC1E,CAAC,CAAC;IAEH,IAAI;QACF,MAAM,OAAO,CAAC,GAAG,CAAC;YAChB,mBAAa,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC;YACpD,mBAAa,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC;SACrD,CAAC,CAAC;KACJ;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CACb,uEAAuE,UAAU,sBAAsB,UAAU,GAAG,CACrH,CAAC;KACH;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAvDD,gDAuDC","sourcesContent":["import { ExpoConfig } from '../Config.types';\nimport { getProjectColorsXMLPathAsync, setColorItem } from './Colors';\nimport { buildResourceItem, readResourcesXMLAsync, ResourceItemXML } from './Resources';\nimport { getProjectStylesXMLPathAsync, setStylesItem } from './Styles';\nimport { writeXMLAsync } from './XML';\n\nconst COLOR_PRIMARY_DARK_KEY = 'colorPrimaryDark';\nconst WINDOW_TRANSLUCENT_STATUS = 'android:windowTranslucentStatus';\nconst WINDOW_LIGHT_STATUS_BAR = 'android:windowLightStatusBar';\n\nexport function getStatusBarColor(config: ExpoConfig) {\n  return config.androidStatusBar?.backgroundColor || 'translucent';\n}\n\nexport function getStatusBarStyle(config: ExpoConfig) {\n  return config.androidStatusBar?.barStyle || 'light-content';\n}\n\nexport async function setStatusBarConfig(config: ExpoConfig, projectDirectory: string) {\n  const hexString = getStatusBarColor(config);\n  const statusBarStyle = getStatusBarStyle(config);\n\n  const stylesPath = await getProjectStylesXMLPathAsync(projectDirectory);\n  const colorsPath = await getProjectColorsXMLPathAsync(projectDirectory);\n\n  let stylesJSON = await readResourcesXMLAsync({ path: stylesPath });\n  let colorsJSON = await readResourcesXMLAsync({ path: colorsPath });\n\n  let styleItemToAdd: ResourceItemXML;\n  if (hexString === 'translucent') {\n    // translucent status bar set in theme\n    styleItemToAdd = buildResourceItem({ name: WINDOW_TRANSLUCENT_STATUS, value: 'true' });\n  } else {\n    // Need to add a color key to colors.xml to use in styles.xml\n    const colorItemToAdd = buildResourceItem({ name: COLOR_PRIMARY_DARK_KEY, value: hexString });\n    colorsJSON = setColorItem(colorItemToAdd, colorsJSON);\n\n    styleItemToAdd = buildResourceItem({\n      name: COLOR_PRIMARY_DARK_KEY,\n      value: `@color/${COLOR_PRIMARY_DARK_KEY}`,\n    });\n  }\n\n  // Default is light-content, don't need to do anything to set it\n  if (statusBarStyle === 'dark-content') {\n    const statusBarStyleItem: ResourceItemXML = buildResourceItem({\n      name: WINDOW_LIGHT_STATUS_BAR,\n      value: `true`,\n    });\n    stylesJSON = setStylesItem({\n      item: statusBarStyleItem,\n      xml: stylesJSON,\n      parent: { name: 'AppTheme', parent: 'Theme.AppCompat.Light.NoActionBar' },\n    });\n  }\n\n  stylesJSON = setStylesItem({\n    item: styleItemToAdd,\n    xml: stylesJSON,\n    parent: { name: 'AppTheme', parent: 'Theme.AppCompat.Light.NoActionBar' },\n  });\n\n  try {\n    await Promise.all([\n      writeXMLAsync({ path: colorsPath, xml: colorsJSON }),\n      writeXMLAsync({ path: stylesPath, xml: stylesJSON }),\n    ]);\n  } catch (e) {\n    throw new Error(\n      `Error setting Android status bar config. Cannot write colors.xml to ${colorsPath}, or styles.xml to ${stylesPath}.`\n    );\n  }\n  return true;\n}\n"]}