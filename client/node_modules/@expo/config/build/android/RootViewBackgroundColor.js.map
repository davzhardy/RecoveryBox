{"version":3,"file":"RootViewBackgroundColor.js","sourceRoot":"","sources":["../../src/android/RootViewBackgroundColor.ts"],"names":[],"mappings":";;AACA,qCAAsE;AACtE,2CAAwF;AACxF,qCAAuE;AACvE,+BAAsC;AAEtC,MAAM,yBAAyB,GAAG,0BAA0B,CAAC;AAC7D,MAAM,uBAAuB,GAAG,oBAAoB,CAAC;AAErD,SAAgB,0BAA0B,CAAC,MAAkB;;IAC3D,UAAI,MAAM,CAAC,OAAO,0CAAE,eAAe,EAAE;QACnC,OAAO,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC;KACvC;IACD,IAAI,MAAM,CAAC,eAAe,EAAE;QAC1B,OAAO,MAAM,CAAC,eAAe,CAAC;KAC/B;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AATD,gEASC;AAEM,KAAK,UAAU,0BAA0B,CAAC,MAAkB,EAAE,gBAAwB;IAC3F,MAAM,SAAS,GAAG,0BAA0B,CAAC,MAAM,CAAC,CAAC;IACrD,IAAI,CAAC,SAAS,EAAE;QACd,OAAO,KAAK,CAAC;KACd;IAED,MAAM,UAAU,GAAG,MAAM,qCAA4B,CAAC,gBAAgB,CAAC,CAAC;IACxE,MAAM,UAAU,GAAG,MAAM,qCAA4B,CAAC,gBAAgB,CAAC,CAAC;IAExE,IAAI,UAAU,GAAG,MAAM,iCAAqB,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;IACnE,IAAI,UAAU,GAAG,MAAM,iCAAqB,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;IAEnE,MAAM,cAAc,GAAG,6BAAiB,CAAC,EAAE,IAAI,EAAE,uBAAuB,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC;IAC9F,MAAM,cAAc,GAAG,6BAAiB,CAAC;QACvC,IAAI,EAAE,yBAAyB;QAC/B,KAAK,EAAE,UAAU,uBAAuB,EAAE;KAC3C,CAAC,CAAC;IAEH,UAAU,GAAG,qBAAY,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;IACtD,UAAU,GAAG,sBAAa,CAAC;QACzB,IAAI,EAAE,cAAc;QACpB,GAAG,EAAE,UAAU;QACf,MAAM,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,mCAAmC,EAAE;KAC1E,CAAC,CAAC;IAEH,IAAI;QACF,MAAM,OAAO,CAAC,GAAG,CAAC;YAChB,mBAAa,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC;YACpD,mBAAa,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC;SACrD,CAAC,CAAC;KACJ;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CACb,oFAAoF,UAAU,GAAG,CAClG,CAAC;KACH;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AApCD,gEAoCC","sourcesContent":["import { ExpoConfig } from '../Config.types';\nimport { getProjectColorsXMLPathAsync, setColorItem } from './Colors';\nimport { buildResourceItem, readResourcesXMLAsync, ResourceItemXML } from './Resources';\nimport { getProjectStylesXMLPathAsync, setStylesItem } from './Styles';\nimport { writeXMLAsync } from './XML';\n\nconst ANDROID_WINDOW_BACKGROUND = 'android:windowBackground';\nconst WINDOW_BACKGROUND_COLOR = 'activityBackground';\n\nexport function getRootViewBackgroundColor(config: ExpoConfig) {\n  if (config.android?.backgroundColor) {\n    return config.android.backgroundColor;\n  }\n  if (config.backgroundColor) {\n    return config.backgroundColor;\n  }\n\n  return null;\n}\n\nexport async function setRootViewBackgroundColor(config: ExpoConfig, projectDirectory: string) {\n  const hexString = getRootViewBackgroundColor(config);\n  if (!hexString) {\n    return false;\n  }\n\n  const stylesPath = await getProjectStylesXMLPathAsync(projectDirectory);\n  const colorsPath = await getProjectColorsXMLPathAsync(projectDirectory);\n\n  let stylesJSON = await readResourcesXMLAsync({ path: stylesPath });\n  let colorsJSON = await readResourcesXMLAsync({ path: colorsPath });\n\n  const colorItemToAdd = buildResourceItem({ name: WINDOW_BACKGROUND_COLOR, value: hexString });\n  const styleItemToAdd = buildResourceItem({\n    name: ANDROID_WINDOW_BACKGROUND,\n    value: `@color/${WINDOW_BACKGROUND_COLOR}`,\n  });\n\n  colorsJSON = setColorItem(colorItemToAdd, colorsJSON);\n  stylesJSON = setStylesItem({\n    item: styleItemToAdd,\n    xml: stylesJSON,\n    parent: { name: 'AppTheme', parent: 'Theme.AppCompat.Light.NoActionBar' },\n  });\n\n  try {\n    await Promise.all([\n      writeXMLAsync({ path: colorsPath, xml: colorsJSON }),\n      writeXMLAsync({ path: stylesPath, xml: stylesJSON }),\n    ]);\n  } catch (e) {\n    throw new Error(\n      `Error setting Android root view background color. Cannot write new styles.xml to ${stylesPath}.`\n    );\n  }\n  return true;\n}\n"]}