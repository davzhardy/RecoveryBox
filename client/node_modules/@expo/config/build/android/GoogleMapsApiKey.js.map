{"version":3,"file":"GoogleMapsApiKey.js","sourceRoot":"","sources":["../../src/android/GoogleMapsApiKey.ts"],"names":[],"mappings":";;AACA,yCAA+E;AAE/E,SAAgB,mBAAmB,CAAC,MAAkB;;IACpD,+BAAO,MAAM,CAAC,OAAO,0CAAE,MAAM,0CAAE,UAAU,0CAAE,MAAM,mCAAI,IAAI,CAAC;AAC5D,CAAC;AAFD,kDAEC;AAEM,KAAK,UAAU,mBAAmB,CAAC,MAAkB,EAAE,gBAA0B;IACtF,MAAM,MAAM,GAAG,mBAAmB,CAAC,MAAM,CAAC,CAAC;IAE3C,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,gBAAgB,CAAC;KACzB;IAED,IAAI,eAAe,GAAG,6BAAkB,CAAC,gBAAgB,CAAC,CAAC;IAC3D,IAAI,CAAC,eAAe,EAAE;QACpB,eAAe,GAAG,EAAE,CAAC,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,EAAE,CAAC;KACjE;IACD,qBAAqB;IACrB,IAAI,oBAAoB,CAAC;IACzB,MAAM,YAAY,GAAG;QACnB,CAAC,EAAE;YACD,cAAc,EAAE,gCAAgC;YAChD,eAAe,EAAE,MAAM;SACxB;KACF,CAAC;IACF,IAAI,eAAe,CAAC,WAAW,CAAC,EAAE;QAChC,oBAAoB,GAAG,eAAe,CAAC,WAAW,CAAC,CAAC,MAAM,CACxD,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,KAAK,gCAAgC,CACxE,CAAC;QACF,IAAI,oBAAoB,CAAC,MAAM,EAAE;YAC/B,oBAAoB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,eAAe,CAAC,GAAG,MAAM,CAAC;SACxD;aAAM;YACL,eAAe,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACjD;KACF;SAAM;QACL,eAAe,CAAC,WAAW,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;KAC/C;IAED,wBAAwB;IACxB,IAAI,uBAAuB,CAAC;IAC5B,MAAM,kBAAkB,GAAwB;QAC9C,CAAC,EAAE;YACD,cAAc,EAAE,wBAAwB;YACxC,kBAAkB,EAAE,OAAO;SAC5B;KACF,CAAC;IAEF,IAAI,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAG,cAAc,GAAG;QACrC,uBAAuB,GAAG,eAAe,CAAC,cAAc,CAAC,CAAC,MAAM,CAC9D,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,KAAK,wBAAwB,CAChE,CAAC;QACF,IAAI,uBAAuB,CAAC,MAAM,EAAE;YAClC,uBAAuB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,kBAAkB,CAAC,GAAG,OAAO,CAAC;SAC/D;aAAM;YACL,eAAe,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;SAC1D;KACF;SAAM;QACL,eAAe,CAAC,cAAc,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;KACxD;IAED,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAvDD,kDAuDC","sourcesContent":["import { ExpoConfig } from '../Config.types';\nimport { Document, getMainApplication, ManifestUsesLibrary } from './Manifest';\n\nexport function getGoogleMapsApiKey(config: ExpoConfig) {\n  return config.android?.config?.googleMaps?.apiKey ?? null;\n}\n\nexport async function setGoogleMapsApiKey(config: ExpoConfig, manifestDocument: Document) {\n  const apiKey = getGoogleMapsApiKey(config);\n\n  if (!apiKey) {\n    return manifestDocument;\n  }\n\n  let mainApplication = getMainApplication(manifestDocument);\n  if (!mainApplication) {\n    mainApplication = { $: { 'android:name': '.MainApplication' } };\n  }\n  // add meta-data item\n  let existingMetaDataItem;\n  const metaDataItem = {\n    $: {\n      'android:name': 'com.google.android.geo.API_KEY',\n      'android:value': apiKey,\n    },\n  };\n  if (mainApplication['meta-data']) {\n    existingMetaDataItem = mainApplication['meta-data'].filter(\n      (e: any) => e['$']['android:name'] === 'com.google.android.geo.API_KEY'\n    );\n    if (existingMetaDataItem.length) {\n      existingMetaDataItem[0]['$']['android:value'] = apiKey;\n    } else {\n      mainApplication['meta-data'].push(metaDataItem);\n    }\n  } else {\n    mainApplication['meta-data'] = [metaDataItem];\n  }\n\n  // add uses-library item\n  let existingUsesLibraryItem;\n  const newUsesLibraryItem: ManifestUsesLibrary = {\n    $: {\n      'android:name': 'org.apache.http.legacy',\n      'android:required': 'false',\n    },\n  };\n\n  if (mainApplication?.['uses-library']) {\n    existingUsesLibraryItem = mainApplication['uses-library'].filter(\n      (e: any) => e['$']['android:name'] === 'org.apache.http.legacy'\n    );\n    if (existingUsesLibraryItem.length) {\n      existingUsesLibraryItem[0]['$']['android:required'] = 'false';\n    } else {\n      mainApplication['uses-library'].push(newUsesLibraryItem);\n    }\n  } else {\n    mainApplication['uses-library'] = [newUsesLibraryItem];\n  }\n\n  return manifestDocument;\n}\n"]}