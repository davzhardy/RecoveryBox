{"version":3,"file":"NavigationBar.js","sourceRoot":"","sources":["../../src/android/NavigationBar.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '../Config.types';\nimport { addWarningAndroid } from '../WarningAggregator';\nimport { getProjectColorsXMLPathAsync, setColorItem } from './Colors';\nimport { buildResourceItem, readResourcesXMLAsync, ResourceItemXML } from './Resources';\nimport { getProjectStylesXMLPathAsync, setStylesItem } from './Styles';\nimport { writeXMLAsync } from './XML';\n\nconst NAVIGATION_BAR_COLOR = 'navigationBarColor';\nconst WINDOW_LIGHT_NAVIGATION_BAR = 'android:windowLightNavigationBar';\n\nexport function getNavigationBarImmersiveMode(config: ExpoConfig) {\n  return config.androidNavigationBar?.visible || null;\n}\n\nexport function getNavigationBarColor(config: ExpoConfig) {\n  return config.androidNavigationBar?.backgroundColor || null;\n}\n\nexport function getNavigationBarStyle(config: ExpoConfig) {\n  return config.androidNavigationBar?.barStyle || 'light-content';\n}\n\nexport async function setNavigationBarConfig(config: ExpoConfig, projectDirectory: string) {\n  const immersiveMode = getNavigationBarImmersiveMode(config);\n  const hexString = getNavigationBarColor(config);\n  const barStyle = getNavigationBarStyle(config);\n\n  const stylesPath = await getProjectStylesXMLPathAsync(projectDirectory);\n  const colorsPath = await getProjectColorsXMLPathAsync(projectDirectory);\n\n  let stylesJSON = await readResourcesXMLAsync({ path: stylesPath });\n  let colorsJSON = await readResourcesXMLAsync({ path: colorsPath });\n\n  if (immersiveMode) {\n    // Immersive mode needs to be set programatically\n    addWarningAndroid(\n      'androidNavigationBar.visible',\n      'Hiding the navigation bar must be done programmatically. Refer to the Android documentation - https://developer.android.com/training/system-ui/immersive - for instructions.'\n    );\n  }\n  if (hexString) {\n    const colorItemToAdd = buildResourceItem({ name: NAVIGATION_BAR_COLOR, value: hexString });\n    colorsJSON = setColorItem(colorItemToAdd, colorsJSON);\n\n    const styleItemToAdd = buildResourceItem({\n      name: `android:${NAVIGATION_BAR_COLOR}`,\n      value: `@color/${NAVIGATION_BAR_COLOR}`,\n    });\n    stylesJSON = setStylesItem({\n      item: styleItemToAdd,\n      xml: stylesJSON,\n      parent: { name: 'AppTheme', parent: 'Theme.AppCompat.Light.NoActionBar' },\n    });\n  }\n  if (barStyle === 'dark-content') {\n    const navigationBarStyleItem = buildResourceItem({\n      name: WINDOW_LIGHT_NAVIGATION_BAR,\n      value: 'true',\n    });\n    stylesJSON = setStylesItem({\n      item: navigationBarStyleItem,\n      xml: stylesJSON,\n      parent: { name: 'AppTheme', parent: 'Theme.AppCompat.Light.NoActionBar' },\n    });\n  }\n\n  try {\n    await Promise.all([\n      writeXMLAsync({ path: colorsPath, xml: colorsJSON }),\n      writeXMLAsync({ path: stylesPath, xml: stylesJSON }),\n    ]);\n  } catch (e) {\n    throw new Error(\n      `Error setting Android navigation bar color. Cannot write colors.xml to ${colorsPath}, or styles.xml to ${stylesPath}.`\n    );\n  }\n  return true;\n}\n"]}