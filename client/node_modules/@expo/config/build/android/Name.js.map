{"version":3,"file":"Name.js","sourceRoot":"","sources":["../../src/android/Name.ts"],"names":[],"mappings":";;AACA,2CAAoF;AACpF,uCAA2F;AAC3F,+BAAsC;AAEtC,SAAgB,OAAO,CAAC,MAAkB;IACxC,OAAO,OAAO,MAAM,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;AAC9D,CAAC;AAFD,0BAEC;AAED;;;GAGG;AACI,KAAK,UAAU,OAAO,CAC3B,YAAiC,EACjC,gBAAwB;IAExB,IAAI,IAAI,GAAkB,IAAI,CAAC;IAC/B,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;QACpC,IAAI,GAAG,YAAY,CAAC;KACrB;SAAM;QACL,IAAI,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;KAC9B;IACD,IAAI,CAAC,IAAI,EAAE;QACT,0DAA0D;QAC1D,OAAO,KAAK,CAAC;KACd;IAED,MAAM,WAAW,GAAG,MAAM,uCAA6B,CAAC,gBAAgB,CAAC,CAAC;IAC1E,IAAI,CAAC,WAAW,EAAE;QAChB,MAAM,IAAI,KAAK,CAAC,uDAAuD,WAAW,GAAG,CAAC,CAAC;KACxF;IAED,IAAI,WAAW,GAAG,MAAM,iCAAqB,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;IACrE,WAAW,GAAG,SAAS,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IAE3C,IAAI;QACF,MAAM,mBAAa,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,GAAG,EAAE,WAAW,EAAE,CAAC,CAAC;KAC9D;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,mDAAmD,WAAW,GAAG,CAAC,CAAC;KACpF;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AA7BD,0BA6BC;AAED,SAAS,SAAS,CAAC,IAAmB,EAAE,WAAwB;IAC9D,IAAI,IAAI,EAAE;QACR,OAAO,uBAAa,CAAC,CAAC,6BAAiB,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;KAC3F;IACD,OAAO,0BAAgB,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;AACnD,CAAC","sourcesContent":["import { ExpoConfig } from '../Config.types';\nimport { buildResourceItem, readResourcesXMLAsync, ResourceXML } from './Resources';\nimport { getProjectStringsXMLPathAsync, removeStringItem, setStringItem } from './Strings';\nimport { writeXMLAsync } from './XML';\n\nexport function getName(config: ExpoConfig) {\n  return typeof config.name === 'string' ? config.name : null;\n}\n\n/**\n * Changes the display name on the home screen,\n * notifications, and others.\n */\nexport async function setName(\n  configOrName: ExpoConfig | string,\n  projectDirectory: string\n): Promise<boolean> {\n  let name: string | null = null;\n  if (typeof configOrName === 'string') {\n    name = configOrName;\n  } else {\n    name = getName(configOrName);\n  }\n  if (!name) {\n    // TODO: Maybe just remove the value from strings instead?\n    return false;\n  }\n\n  const stringsPath = await getProjectStringsXMLPathAsync(projectDirectory);\n  if (!stringsPath) {\n    throw new Error(`There was a problem setting your Facebook App ID in ${stringsPath}.`);\n  }\n\n  let stringsJSON = await readResourcesXMLAsync({ path: stringsPath });\n  stringsJSON = applyName(name, stringsJSON);\n\n  try {\n    await writeXMLAsync({ path: stringsPath, xml: stringsJSON });\n  } catch (e) {\n    throw new Error(`Error setting name. Cannot write strings.xml to ${stringsPath}.`);\n  }\n  return true;\n}\n\nfunction applyName(name: string | null, stringsJSON: ResourceXML): ResourceXML {\n  if (name) {\n    return setStringItem([buildResourceItem({ name: 'app_name', value: name })], stringsJSON);\n  }\n  return removeStringItem('app_name', stringsJSON);\n}\n"]}