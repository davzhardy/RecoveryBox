{"version":3,"file":"Paths.js","sourceRoot":"","sources":["../../src/android/Paths.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\nimport { sync as globSync } from 'glob';\nimport * as path from 'path';\n\nimport { ResourceKind } from './Resources';\n\nexport async function getMainActivityAsync(\n  projectRoot: string\n): Promise<{ path: string; language: 'java' | 'kt' }> {\n  const mainActivityJavaPath = globSync(\n    path.join(projectRoot, 'android/app/src/main/java/**/MainActivity.{java,kt}')\n  )[0];\n\n  const mainActivityPathJava = path.resolve(mainActivityJavaPath, '../MainActivity.java');\n  const mainActivityPathKotlin = path.resolve(mainActivityJavaPath, '../MainActivity.kt');\n\n  const isJava = await fs.pathExists(mainActivityPathJava);\n  const isKotlin = !isJava && (await fs.pathExists(mainActivityPathKotlin));\n\n  if (!isJava && !isKotlin) {\n    throw new Error(`Failed to find 'MainActivity' file for project: ${projectRoot}.`);\n  }\n  return {\n    path: isJava ? mainActivityPathJava : mainActivityPathKotlin,\n    language: isJava ? 'java' : 'kt',\n  };\n}\n\nexport function getAndroidBuildGradle(projectRoot: string): string {\n  return path.join(projectRoot, 'android', 'build.gradle');\n}\n\nexport function getAppBuildGradle(projectRoot: string): string {\n  return path.join(projectRoot, 'android', 'app', 'build.gradle');\n}\n\nexport async function getProjectPathOrThrowAsync(projectRoot: string): Promise<string> {\n  const projectPath = path.join(projectRoot, 'android');\n  if (await directoryExistsAsync(projectPath)) {\n    return projectPath;\n  }\n  throw new Error(`Android project folder is missing in project: ${projectRoot}`);\n}\n\nexport async function getAndroidManifestAsync(projectRoot: string): Promise<string> {\n  const projectPath = await getProjectPathOrThrowAsync(projectRoot);\n\n  const filePath = path.join(projectPath, 'app/src/main/AndroidManifest.xml');\n  // if (await fileExistsAsync(filePath)) {\n  return filePath;\n  // }\n}\n\nexport async function getResourceXMLPathAsync(\n  projectRoot: string,\n  { kind = 'values', name }: { kind?: ResourceKind; name: 'colors' | 'strings' | 'styles' | string }\n): Promise<string> {\n  const projectPath = await getProjectPathOrThrowAsync(projectRoot);\n\n  const filePath = path.join(projectPath, `app/src/main/res/${kind}/${name}.xml`);\n  return filePath;\n}\n\n/**\n * A non-failing version of async FS stat.\n *\n * @param file\n */\nasync function statAsync(file: string): Promise<fs.Stats | null> {\n  try {\n    return await fs.stat(file);\n  } catch {\n    return null;\n  }\n}\n\nexport async function fileExistsAsync(file: string): Promise<boolean> {\n  return (await statAsync(file))?.isFile() ?? false;\n}\n\nasync function directoryExistsAsync(file: string): Promise<boolean> {\n  return (await statAsync(file))?.isDirectory() ?? false;\n}\n"]}