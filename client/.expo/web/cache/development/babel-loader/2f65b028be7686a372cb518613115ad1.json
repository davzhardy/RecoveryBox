{"ast":null,"code":"import config from \"./config/api/config\";\nvar BASE_URL = config.RbServerBase + config.RbServerPort;\n\nfunction fetchRequest(path, options) {\n  return fetch(BASE_URL + path, options).then(function (res) {\n    return res.status < 400 ? res.json() : Promise.reject(res);\n  }).catch(function (err) {\n    console.log('Error:', JSON.stringify(err));\n  });\n}\n\n;\n\nfunction getQuote() {\n  return fetchRequest('/apirequest');\n}\n\nfunction postDailyData(body) {\n  return fetchRequest('/adddailydata', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n}\n\nfunction getUserInfo(userId, accessToken) {\n  return fetchRequest(\"/user/\" + userId, {\n    method: 'GET',\n    credentials: 'include',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: \"Bearer \" + accessToken\n    }\n  }).catch(function (err) {\n    return console.log(err);\n  });\n}\n\nfunction postHistoricalData(body) {\n  return fetchRequest('/addhistoricaldata', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n}\n\nfunction updateHistoricalData(body) {}\n\nfunction getJwt(idToken) {\n  return fetchRequest('/auth/google', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(idToken)\n  });\n}\n\nexport default {\n  getQuote: getQuote,\n  postDailyData: postDailyData,\n  getUserInfo: getUserInfo,\n  postHistoricalData: postHistoricalData,\n  updateHistoricalData: updateHistoricalData,\n  getJwt: getJwt\n};","map":{"version":3,"sources":["/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/ApiService.js"],"names":["config","BASE_URL","RbServerBase","RbServerPort","fetchRequest","path","options","fetch","then","res","status","json","Promise","reject","catch","err","console","log","JSON","stringify","getQuote","postDailyData","body","method","headers","getUserInfo","userId","accessToken","credentials","mode","Authorization","postHistoricalData","updateHistoricalData","getJwt","idToken"],"mappings":"AAAA,OAAOA,MAAP;AAEA,IAAMC,QAAQ,GAAGD,MAAM,CAACE,YAAP,GAAsBF,MAAM,CAACG,YAA9C;;AAEA,SAASC,YAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsC;AACpC,SAAOC,KAAK,CAACN,QAAQ,GAAGI,IAAZ,EAAkBC,OAAlB,CAAL,CACJE,IADI,CACC,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,MAAJ,GAAa,GAAb,GAAmBD,GAAG,CAACE,IAAJ,EAAnB,GAAgCC,OAAO,CAACC,MAAR,CAAeJ,GAAf,CAApC;AAAA,GADJ,EAEJK,KAFI,CAEE,UAACC,GAAD,EAAS;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBC,IAAI,CAACC,SAAL,CAAeJ,GAAf,CAAtB;AACD,GAJI,CAAP;AAKD;;AAAA;;AAED,SAASK,QAAT,GAAqB;AACnB,SAAOhB,YAAY,CAAC,aAAD,CAAnB;AACD;;AAED,SAASiB,aAAT,CAAwBC,IAAxB,EAA8B;AAC5B,SAAOlB,YAAY,CAAC,eAAD,EAAkB;AACnCmB,IAAAA,MAAM,EAAE,MAD2B;AAEnCC,IAAAA,OAAO,EAAE;AAAC,sBAAgB;AAAjB,KAF0B;AAGnCF,IAAAA,IAAI,EAAEJ,IAAI,CAACC,SAAL,CAAeG,IAAf;AAH6B,GAAlB,CAAnB;AAKD;;AAED,SAASG,WAAT,CAAsBC,MAAtB,EAA8BC,WAA9B,EAA2C;AACzC,SAAOvB,YAAY,YAAUsB,MAAV,EAAoB;AACrCH,IAAAA,MAAM,EAAE,KAD6B;AAErCK,IAAAA,WAAW,EAAE,SAFwB;AAGrCC,IAAAA,IAAI,EAAE,MAH+B;AAIrCL,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEPM,MAAAA,aAAa,cAAYH;AAFlB;AAJ4B,GAApB,CAAZ,CASNb,KATM,CASA,UAACC,GAAD;AAAA,WAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAT;AAAA,GATA,CAAP;AAUD;;AAED,SAASgB,kBAAT,CAA6BT,IAA7B,EAAmC;AACjC,SAAOlB,YAAY,CAAC,oBAAD,EAAuB;AACxCmB,IAAAA,MAAM,EAAE,MADgC;AAExCC,IAAAA,OAAO,EAAE;AAAC,sBAAgB;AAAjB,KAF+B;AAGxCF,IAAAA,IAAI,EAAEJ,IAAI,CAACC,SAAL,CAAeG,IAAf;AAHkC,GAAvB,CAAnB;AAKD;;AAED,SAASU,oBAAT,CAA+BV,IAA/B,EAAqC,CACpC;;AAED,SAASW,MAAT,CAAiBC,OAAjB,EAA0B;AACxB,SAAO9B,YAAY,CAAE,cAAF,EAAkB;AACnCmB,IAAAA,MAAM,EAAE,MAD2B;AAEnCC,IAAAA,OAAO,EAAE;AAAC,sBAAgB;AAAjB,KAF0B;AAGnCF,IAAAA,IAAI,EAAEJ,IAAI,CAACC,SAAL,CAAee,OAAf;AAH6B,GAAlB,CAAnB;AAKD;;AAED,eAAe;AACbd,EAAAA,QAAQ,EAARA,QADa;AAEbC,EAAAA,aAAa,EAAbA,aAFa;AAGbI,EAAAA,WAAW,EAAXA,WAHa;AAIbM,EAAAA,kBAAkB,EAAlBA,kBAJa;AAKbC,EAAAA,oBAAoB,EAApBA,oBALa;AAMbC,EAAAA,MAAM,EAANA;AANa,CAAf","sourcesContent":["import config from './config/api/config'\n\nconst BASE_URL = config.RbServerBase + config.RbServerPort;\n\nfunction fetchRequest (path, options) {\n  return fetch(BASE_URL + path, options)\n    .then(res => res.status < 400 ? res.json() : Promise.reject(res))\n    .catch((err) => {\n      console.log('Error:', JSON.stringify(err)) //eslint-disable-line no-console\n    })\n};\n\nfunction getQuote () {\n  return fetchRequest('/apirequest')\n}\n\nfunction postDailyData (body) {\n  return fetchRequest('/adddailydata', {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify(body)\n  })\n}\n\nfunction getUserInfo (userId, accessToken) {\n  return fetchRequest(`/user/${userId}`, {\n    method: 'GET',\n    credentials: 'include',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${accessToken}`,\n    }\n  })  \n  .catch((err) => console.log(err));\n}\n\nfunction postHistoricalData (body) {\n  return fetchRequest('/addhistoricaldata', {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify(body)\n  })\n}\n\nfunction updateHistoricalData (body) {\n}\n\nfunction getJwt (idToken) {\n  return fetchRequest ('/auth/google', {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify(idToken)\n  })\n}\n\nexport default {\n  getQuote,\n  postDailyData,\n  getUserInfo,\n  postHistoricalData,\n  updateHistoricalData,\n  getJwt\n}"]},"metadata":{},"sourceType":"module"}