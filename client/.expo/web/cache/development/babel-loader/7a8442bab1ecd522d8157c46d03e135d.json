{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/containers/Register.js\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { BoldAppText, MediumAppText } from \"../styles/text\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ApiService from \"../ApiService\";\nimport colors from \"../styles/colors\";\nimport { NavigationContainer, StackActions } from '@react-navigation/native';\n\nfunction Register(_ref) {\n  var navigation = _ref.navigation;\n  var dispatch = useDispatch();\n\n  var _useState = useState(useSelector(function (state) {\n    return state.user.username;\n  })),\n      _useState2 = _slicedToArray(_useState, 2),\n      usernameInput = _useState2[0],\n      onChangeUsername = _useState2[1];\n\n  var _useState3 = useState(useSelector(function (state) {\n    return state.user.password;\n  })),\n      _useState4 = _slicedToArray(_useState3, 2),\n      passwordInput = _useState4[0],\n      onChangePassword = _useState4[1];\n\n  var _useState5 = useState(useSelector(function (state) {\n    return state.user.firstName;\n  })),\n      _useState6 = _slicedToArray(_useState5, 2),\n      firstNameInput = _useState6[0],\n      onChangeFirstName = _useState6[1];\n\n  var _useState7 = useState(useSelector(function (state) {\n    return state.user.lastName;\n  })),\n      _useState8 = _slicedToArray(_useState7, 2),\n      lastNameInput = _useState8[0],\n      onChangeLastName = _useState8[1];\n\n  var _useState9 = useState(useSelector(function (state) {\n    return state.user.email;\n  })),\n      _useState10 = _slicedToArray(_useState9, 2),\n      emailInput = _useState10[0],\n      onChangeEmail = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      warning = _useState12[0],\n      setWarning = _useState12[1];\n\n  var submitHandler = function submitHandler() {\n    return _regeneratorRuntime.async(function submitHandler$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(usernameInput && passwordInput)) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(receiveInfoandData(usernameInput));\n\n          case 3:\n            navigation.dispatch(StackActions.replace('Home'));\n            _context.next = 7;\n            break;\n\n          case 6:\n            setWarning(true);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  function receiveInfoandData(username) {\n    ApiService.getUserInfo(username).then(function (data) {\n      var dispatchtoUser = {\n        id: data[0].id,\n        email: data[0].id,\n        username: data[0].username,\n        firstName: data[0].firstName,\n        lastName: data[0].lastName,\n        registrationDate: data[0].registrationDate\n      };\n\n      for (var _iterator = _createForOfIteratorHelperLoose(data[0].Data), _step; !(_step = _iterator()).done;) {\n        var i = _step.value;\n        i.date = Number(i.date);\n        var parseMoods = i.moods.replace(/[\\[\\]',\"]+/g, '');\n        var arrayMoods = void 0;\n        if (parseMoods.length) arrayMoods = parseMoods.split(' ');\n        if (arrayMoods === undefined) arrayMoods = [];\n        i.moods = arrayMoods;\n        i.suggestions = eval(i.suggestions);\n      }\n\n      var dispatchtoHistoricalData = data[0].Data;\n      dispatch({\n        type: 'UPDATE_USERINFO',\n        payload: dispatchtoUser\n      });\n      dispatch({\n        type: 'CREATE_HISTORICALDATA',\n        payload: dispatchtoHistoricalData\n      });\n    });\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, React.createElement(BoldAppText, {\n    style: styles.logo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"RecoveryBox\"), React.createElement(View, {\n    style: styles.inputView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, React.createElement(TextInput, {\n    placeholder: \"Username\",\n    value: usernameInput ? usernameInput : '',\n    onChangeText: function onChangeText(text) {\n      return onChangeUsername(text);\n    },\n    style: styles.inputText,\n    placeholderTextColor: colors.platinum,\n    textContentType: 'username',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: styles.inputView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, React.createElement(TextInput, {\n    placeholder: \"Password\",\n    value: passwordInput ? passwordInput : '',\n    secureTextEntry: true,\n    style: styles.inputText,\n    onChangeText: function onChangeText(text) {\n      return onChangePassword(text);\n    },\n    placeholderTextColor: colors.platinum,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: styles.inputView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, React.createElement(TextInput, {\n    placeholder: \"First name\",\n    value: passwordInput ? passwordInput : '',\n    secureTextEntry: true,\n    style: styles.inputText,\n    onChangeText: function onChangeText(text) {\n      return onChangeFirstName(text);\n    },\n    placeholderTextColor: colors.platinum,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: styles.inputView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, React.createElement(TextInput, {\n    placeholder: \"Last name\",\n    value: passwordInput ? passwordInput : '',\n    secureTextEntry: true,\n    style: styles.inputText,\n    onChangeText: function onChangeText(text) {\n      return onChangeLastName(text);\n    },\n    placeholderTextColor: colors.platinum,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: styles.inputView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, React.createElement(TextInput, {\n    placeholder: \"Email address\",\n    value: passwordInput ? passwordInput : '',\n    secureTextEntry: true,\n    style: styles.inputText,\n    onChangeText: function onChangeText(text) {\n      return onChangeEmail(text);\n    },\n    placeholderTextColor: colors.platinum,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  })), React.createElement(TouchableOpacity, {\n    style: [styles.button, {\n      marginTop: 7\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, \"REGISTER USER\")), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, warning ? React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  }, \"Please submit both a username and password\") : null));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: colors.platinum\n  },\n  inputView: {\n    width: \"80%\",\n    backgroundColor: colors.blue,\n    borderRadius: 25,\n    height: 50,\n    marginBottom: 20,\n    justifyContent: \"center\",\n    padding: 20\n  },\n  logo: {\n    color: colors.orange,\n    fontSize: 40,\n    marginBottom: 60\n  },\n  inputText: {\n    height: 50,\n    color: 'white',\n    textAlign: 'center'\n  },\n  button: {\n    width: \"60%\",\n    backgroundColor: colors.orange,\n    borderRadius: 25,\n    height: 50,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: 30,\n    marginBottom: 10\n  },\n  text: {\n    fontFamily: 'Montserrat_500Medium',\n    fontStyle: \"normal\",\n    fontSize: 16,\n    color: \"white\"\n  }\n});\nexport default Register;","map":{"version":3,"sources":["/Users/davidhardy/Coding/CodeworksCourse/Senior/Solo Project/RecoveryBox/client/containers/Register.js"],"names":["React","useState","BoldAppText","MediumAppText","useDispatch","useSelector","ApiService","colors","NavigationContainer","StackActions","Register","navigation","dispatch","state","user","username","usernameInput","onChangeUsername","password","passwordInput","onChangePassword","firstName","firstNameInput","onChangeFirstName","lastName","lastNameInput","onChangeLastName","email","emailInput","onChangeEmail","warning","setWarning","submitHandler","receiveInfoandData","replace","getUserInfo","then","data","dispatchtoUser","id","registrationDate","Data","i","date","Number","parseMoods","moods","arrayMoods","length","split","undefined","suggestions","eval","dispatchtoHistoricalData","type","payload","styles","container","logo","inputView","text","inputText","platinum","button","marginTop","StyleSheet","create","flex","alignItems","justifyContent","backgroundColor","width","blue","borderRadius","height","marginBottom","padding","color","orange","fontSize","textAlign","fontFamily","fontStyle"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { StyleSheet, TextInput, View, TouchableOpacity, Text, Image } from 'react-native';\nimport { BoldAppText, MediumAppText } from '../styles/text'\nimport {useDispatch, useSelector } from \"react-redux\";\nimport ApiService from '../ApiService'\nimport colors from '../styles/colors'\nimport { NavigationContainer, StackActions } from '@react-navigation/native';\n\n\nfunction Register ({ navigation }) {\n\n  // TODO: refactor to not have to useState for passwordInput and usernameInput?\n  // TODO: add a warning if your user is not on the db and don't trigger the navigation \n  const dispatch = useDispatch();\n\n  const [usernameInput, onChangeUsername] = useState(useSelector((state) => state.user.username));\n  const [passwordInput, onChangePassword] = useState(useSelector((state) => state.user.password));\n  const [firstNameInput, onChangeFirstName] = useState(useSelector((state) => state.user.firstName));\n  const [lastNameInput, onChangeLastName] = useState(useSelector((state) => state.user.lastName));\n  const [emailInput, onChangeEmail] = useState(useSelector((state) => state.user.email));\n  const [warning, setWarning] = useState(false); \n\n  const submitHandler = async () => {\n    if (usernameInput && passwordInput) {\n      await receiveInfoandData(usernameInput);\n      navigation.dispatch(\n        StackActions.replace('Home'))\n    } else {\n      setWarning(true);\n    }\n  }\n\n  function receiveInfoandData (username) {\n    ApiService.getUserInfo(username)\n    .then(data => {\n      let dispatchtoUser = {\n        id: data[0].id,\n        email: data[0].id,\n        username: data[0].username,\n        firstName: data[0].firstName,\n        lastName: data[0].lastName,\n        registrationDate: data[0].registrationDate,\n      }\n      for (let i of data[0].Data) {\n        i.date = Number(i.date)\n        let parseMoods = i.moods.replace(/[\\[\\]',\"]+/g,'')\n        let arrayMoods;\n        if (parseMoods.length) arrayMoods = parseMoods.split(' ')\n        if (arrayMoods===undefined) arrayMoods = []\n        i.moods = arrayMoods\n        i.suggestions = eval(i.suggestions)\n      }\n      let dispatchtoHistoricalData = data[0].Data\n      dispatch({\n        type: 'UPDATE_USERINFO',\n        payload: dispatchtoUser\n      })\n      dispatch({\n        type: 'CREATE_HISTORICALDATA',\n        payload: dispatchtoHistoricalData\n      })\n    })\n  }\n\n  return (\n    <View style={styles.container}>\n      <BoldAppText style={styles.logo}>RecoveryBox</BoldAppText>\n      <View style={styles.inputView} >\n        <TextInput\n          placeholder='Username'\n          value= {usernameInput ? usernameInput : ''}\n          onChangeText={text => onChangeUsername(text)}\n          style={styles.inputText}\n          placeholderTextColor={colors.platinum}\n          textContentType={'username'}\n        />\n      </View>\n      <View style={styles.inputView} >\n        <TextInput\n          placeholder='Password'\n          value= {passwordInput ? passwordInput : ''}\n          secureTextEntry={true}\n          style={styles.inputText}\n          onChangeText={text => onChangePassword(text)}\n          placeholderTextColor={colors.platinum}\n        />\n      </View>\n      <View style={styles.inputView} >\n        <TextInput\n          placeholder='First name'\n          value= {passwordInput ? passwordInput : ''}\n          secureTextEntry={true}\n          style={styles.inputText}\n          onChangeText={text => onChangeFirstName(text)}\n          placeholderTextColor={colors.platinum}\n        />\n      </View>\n      <View style={styles.inputView} >\n        <TextInput\n          placeholder='Last name'\n          value= {passwordInput ? passwordInput : ''}\n          secureTextEntry={true}\n          style={styles.inputText}\n          onChangeText={text => onChangeLastName(text)}\n          placeholderTextColor={colors.platinum}\n        />\n      </View>\n      <View style={styles.inputView} >\n        <TextInput\n          placeholder='Email address'\n          value= {passwordInput ? passwordInput : ''}\n          secureTextEntry={true}\n          style={styles.inputText}\n          onChangeText={text => onChangeEmail(text)}\n          placeholderTextColor={colors.platinum}\n        />\n      </View>\n      <TouchableOpacity style={[styles.button, {marginTop:7}]}>\n        <Text style={styles.text}>REGISTER USER</Text>\n      </TouchableOpacity>\n      <View>\n        { \n          warning ? <Text>Please submit both a username and password</Text> : null\n        }\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: colors.platinum,\n  },\n  inputView:{\n    width:\"80%\",\n    backgroundColor: colors.blue,\n    borderRadius:25,\n    height:50,\n    marginBottom:20,\n    justifyContent:\"center\",\n    padding:20,\n  },\n  logo: {\n    color: colors.orange, \n    fontSize: 40,\n    marginBottom: 60,\n  },\n  inputText: {\n    height:50,\n    color:'white',\n    textAlign: 'center',\n  },\n  button: {\n    width:\"60%\",\n    backgroundColor: colors.orange,\n    borderRadius:25,\n    height:50,\n    alignItems:\"center\",\n    justifyContent:\"center\",\n    marginTop:30,\n    marginBottom:10,\n  },\n  text: {\n    fontFamily: 'Montserrat_500Medium',\n    fontStyle: \"normal\",\n    fontSize: 16,\n    color: \"white\",\n\n  }\n});\n\n\n\nexport default Register;"]},"metadata":{},"sourceType":"module"}